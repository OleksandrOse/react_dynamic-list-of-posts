{"version":3,"sources":["components/PostsList.tsx","components/Loader/Loader.tsx","utils/fetchClient.ts","types/errorKeys.ts","utils/warningTimer.ts","utils/DefaultErrors.ts","utils/DefaultNewComment.ts","components/NewCommentForm.tsx","api/comments.ts","components/PostDetails.tsx","components/UserSelector.tsx","App.tsx","api/posts.ts","api/users.ts","index.tsx"],"names":["PostsList","posts","openPost","onChoosePost","className","map","post","id","title","type","classNames","onClick","Loader","BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","body","JSON","stringify","headers","then","fetch","response","ok","Error","json","ErrorKeys","client","warningTimer","callback","value","DefaultErrors","NameError","EmailError","BodyError","DefaultNewComment","postId","name","email","NewCommentForm","setComments","setIsHasError","useState","isLoading","setIsLoading","errors","setErrors","errorName","errorBody","errorEmail","newComment","setNewComment","commentName","handleChange","e","target","currentErrors","handleSubmit","a","preventDefault","commentData","prevComments","onSubmit","onReset","htmlFor","placeholder","onChange","PostDetails","comments","isCommentsLoading","isWriteComment","setIsWriteComment","isError","setIsError","removeComment","commentRemoveId","filter","useEffect","length","href","UserSelector","users","chooseUser","user","onSetUser","isActive","setIsActive","role","handleChooseUser","App","setUsers","setUser","setPosts","setPost","setIsCommentsLoading","commentId","commentsData","userId","postsData","usersData","choosePost","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.7218ea4e.chunk.js","sourcesContent":["import React from 'react';\nimport classNames from 'classnames';\nimport { Post } from '../types/Post';\n\ntype Props = {\n  posts: Post[] | [];\n  openPost: Post | null;\n  onChoosePost: (post: Post) => void;\n};\n\nexport const PostsList: React.FC<Props> = ({\n  posts,\n  openPost,\n  onChoosePost,\n}) => {\n  return (\n    <div data-cy=\"PostsList\">\n      <p className=\"title\">Posts:</p>\n\n      <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n        <thead>\n          <tr className=\"has-background-link-light\">\n            <th>#</th>\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {posts.map(post => {\n            const { id, title } = post;\n\n            return (\n              <tr data-cy=\"Post\" key={id}>\n                <td data-cy=\"PostId\">{id}</td>\n\n                <td data-cy=\"PostTitle\">\n                  {title}\n                </td>\n\n                <td className=\"has-text-right is-vcentered\">\n                  <button\n                    type=\"button\"\n                    data-cy=\"PostButton\"\n                    className={classNames(\n                      'button is-link',\n                      { 'is-light': openPost?.id !== id },\n                    )}\n                    onClick={() => onChoosePost(post)}\n                  >\n                    {openPost?.id !== id ? 'Open' : 'Close'}\n                  </button>\n                </td>\n              </tr>\n            );\n          })}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nconst BASE_URL = 'https://mate.academy/students-api';\n\n// a promise resolved after a given delay\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\n// To have autocompletion and avoid mistypes\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null, // we can send any data to the server\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    // We add body and Content-Type only for the requests with data\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  // for a demo purpose we emulate a delay to see if Loaders work\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => {\n      if (!response.ok) {\n        throw new Error();\n      }\n\n      return response.json();\n    });\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","export enum ErrorKeys {\n  NameError = 'errorName',\n  EmailError = 'errorEmail',\n  BodyError = 'errorBody',\n}\n","export const warningTimer = <T>(\n  callback: (value: T) => void,\n  value: T,\n  delay: number,\n) => {\n  setTimeout(() => {\n    callback(value);\n  }, delay);\n};\n","import { ErrorKeys } from '../types/errorKeys';\n\nexport const DefaultErrors = {\n  [ErrorKeys.NameError]: false,\n  [ErrorKeys.EmailError]: false,\n  [ErrorKeys.BodyError]: false,\n};\n","export const DefaultNewComment = {\n  postId: 0,\n  name: '',\n  email: '',\n  body: '',\n};\n","import React, { Dispatch, SetStateAction, useState } from 'react';\nimport classNames from 'classnames';\nimport { Comment, CommentData } from '../types/Comment';\nimport { createComment } from '../api/comments';\nimport { warningTimer } from '../utils/warningTimer';\nimport { ErrorKeys } from '../types/errorKeys';\nimport { DefaultErrors } from '../utils/DefaultErrors';\nimport { DefaultNewComment } from '../utils/DefaultNewComment';\n\ntype Props = {\n  postId: number | undefined;\n  setComments: Dispatch<SetStateAction<Comment[]>>\n  setIsHasError: Dispatch<SetStateAction<boolean>>;\n};\n\nexport const NewCommentForm: React.FC<Props> = ({\n  postId,\n  setComments,\n  setIsHasError,\n}) => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [errors, setErrors] = useState(DefaultErrors);\n  const { errorName, errorBody, errorEmail } = errors;\n\n  const [newComment, setNewComment] = useState<CommentData>(DefaultNewComment);\n\n  const { name: commentName, email, body } = newComment;\n\n  const handleChange = (\n    e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>,\n  ) => {\n    const { name, value } = e.target;\n\n    if (commentName) {\n      setErrors(currentErrors => ({\n        ...currentErrors,\n        [ErrorKeys.NameError]: false,\n      }));\n    }\n\n    if (email) {\n      setErrors(currentErrors => ({\n        ...currentErrors,\n        [ErrorKeys.EmailError]: false,\n      }));\n    }\n\n    if (body) {\n      setErrors(currentErrors => ({\n        ...currentErrors,\n        [ErrorKeys.BodyError]: false,\n      }));\n    }\n\n    setNewComment({\n      ...newComment,\n      [name]: value,\n    });\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    if (postId) {\n      setNewComment({\n        ...newComment,\n        postId,\n      });\n    }\n\n    if (!commentName || !email || !body) {\n      setErrors(currentErrors => ({\n        ...currentErrors,\n        [ErrorKeys.NameError]: !commentName,\n        [ErrorKeys.EmailError]: !email,\n        [ErrorKeys.BodyError]: !body,\n      }));\n\n      return;\n    }\n\n    try {\n      setIsLoading(true);\n      const commentData = await createComment(newComment);\n\n      setComments(prevComments => [...prevComments, commentData]);\n    } catch {\n      setIsHasError(true);\n      warningTimer(setIsHasError, false, 3000);\n    } finally {\n      setIsLoading(false);\n      const bodyDelete = 'body';\n\n      setNewComment({\n        ...newComment,\n        [bodyDelete]: '',\n      });\n    }\n  };\n\n  const handleReset = (e: React.FormEvent) => {\n    e.preventDefault();\n\n    setNewComment(DefaultNewComment);\n\n    setErrors({\n      [ErrorKeys.NameError]: false,\n      [ErrorKeys.EmailError]: false,\n      [ErrorKeys.BodyError]: false,\n    });\n  };\n\n  return (\n    <form\n      data-cy=\"NewCommentForm\"\n      onSubmit={handleSubmit}\n      onReset={handleReset}\n    >\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            className={classNames(\n              'input',\n              { 'is-danger': errorName },\n            )}\n            value={commentName}\n            onChange={handleChange}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n\n          {errorName && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {errorName && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Name is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"email\"\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            className={classNames(\n              'input',\n              { 'is-danger': errorEmail },\n            )}\n            value={email}\n            onChange={handleChange}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n\n          {errorEmail && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {errorEmail && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Email is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            name=\"body\"\n            placeholder=\"Type comment here\"\n            className={classNames(\n              'textarea',\n              { 'is-danger': errorBody },\n            )}\n            value={body}\n            onChange={handleChange}\n          />\n        </div>\n\n        {errorBody && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Enter some text\n          </p>\n        )}\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className={classNames(\n              'button is-link',\n              { 'is-loading': isLoading },\n            )}\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          {/* eslint-disable-next-line react/button-has-type */}\n          <button type=\"reset\" className=\"button is-link is-light\">\n            Clear\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import { Comment, CommentData } from '../types/Comment';\nimport { client } from '../utils/fetchClient';\n\nexport const getComments = (commentId: number) => {\n  return client.get<Comment[]>(`/comments?postId=${commentId}`);\n};\n\nexport const deleteComment = (commentId: number) => {\n  return client.delete(`/comments/${commentId}`);\n};\n\nexport const createComment = (data: CommentData) => {\n  return client.post<Comment>('/comments', data);\n};\n","import React, {\n  Dispatch,\n  SetStateAction,\n  useState,\n  useEffect,\n} from 'react';\nimport { Loader } from './Loader';\nimport { NewCommentForm } from './NewCommentForm';\nimport { Comment } from '../types/Comment';\nimport { Post } from '../types/Post';\nimport { deleteComment } from '../api/comments';\nimport { warningTimer } from '../utils/warningTimer';\n\ntype Props = {\n  post: Post | null;\n  comments: Comment[];\n  setComments: Dispatch<SetStateAction<Comment[]>>;\n  isCommentsLoading: boolean,\n};\n\nexport const PostDetails: React.FC<Props> = ({\n  post,\n  comments,\n  setComments,\n  isCommentsLoading,\n}) => {\n  const [isWriteComment, setIsWriteComment] = useState(false);\n  const [isError, setIsError] = useState(false);\n\n  const removeComment = async (commentRemoveId: number) => {\n    try {\n      await deleteComment(commentRemoveId);\n      setComments(prevComments => prevComments\n        .filter(({ id }) => id !== commentRemoveId));\n    } catch {\n      setIsError(true);\n      warningTimer(setIsError, false, 3000);\n    }\n  };\n\n  useEffect(() => {\n    setIsWriteComment(false);\n  }, [post]);\n\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"content\" data-cy=\"PostDetails\">\n        <div className=\"block\">\n          <h2 data-cy=\"PostTitle\">\n            {`${post?.id}: ${post?.title}`}\n          </h2>\n\n          <p data-cy=\"PostBody\">\n            {post?.body}\n          </p>\n        </div>\n\n        <div className=\"block\">\n          {isCommentsLoading && <Loader />}\n\n          {isError && (\n            <div className=\"notification is-danger\" data-cy=\"CommentsError\">\n              Something went wrong\n            </div>\n          )}\n\n          {!isCommentsLoading && !isError && (!comments.length ? (\n            <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n              No comments yet\n            </p>\n          ) : (\n            <>\n              <p className=\"title is-4\">Comments:</p>\n              {comments.map(({\n                id,\n                email,\n                name,\n                body,\n              }) => (\n                <article\n                  className=\"message is-small\"\n                  data-cy=\"Comment\"\n                  key={id}\n                >\n                  <div className=\"message-header\">\n                    <a\n                      href={`mailto:${email}`}\n                      data-cy=\"CommentAuthor\"\n                    >\n                      {name}\n                    </a>\n                    <button\n                      data-cy=\"CommentDelete\"\n                      type=\"button\"\n                      className=\"delete is-small\"\n                      aria-label=\"delete\"\n                      onClick={() => removeComment(id)}\n                    >\n                      delete button\n                    </button>\n                  </div>\n\n                  <div className=\"message-body\" data-cy=\"CommentBody\">\n                    {body}\n                  </div>\n                </article>\n              ))}\n            </>\n          ))}\n\n          {!isCommentsLoading && !isError && !isWriteComment && (\n            <button\n              data-cy=\"WriteCommentButton\"\n              type=\"button\"\n              className=\"button is-link\"\n              onClick={() => setIsWriteComment(true)}\n            >\n              Write a comment\n            </button>\n          )}\n        </div>\n\n        {isWriteComment && (\n          <NewCommentForm\n            postId={post?.id}\n            setComments={setComments}\n            setIsHasError={setIsError}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport classNames from 'classnames';\nimport { User } from '../types/User';\n\ntype Props = {\n  users: User[];\n  user: User | null;\n  onSetUser: (user: User) => void;\n};\n\nexport const UserSelector: React.FC<Props> = ({\n  users,\n  user: chooseUser,\n  onSetUser,\n}) => {\n  const [isActive, setIsActive] = useState(false);\n\n  const handleChooseUser = (user: User) => {\n    onSetUser(user);\n    setIsActive(false);\n  };\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      className={classNames(\n        'dropdown',\n        { 'is-active': isActive },\n      )}\n    >\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={() => setIsActive(true)}\n        >\n          <span>{chooseUser?.name || 'Choose a user'}</span>\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      <div className=\"dropdown-menu\" id=\"dropdown-menu\" role=\"menu\">\n        <ul className=\"dropdown-content\">\n          {users.map(user => (\n            <li key={user.id}>\n              <a\n                href={`#user-${user.id}`}\n                className=\"dropdown-item\"\n                onClick={() => {\n                  handleChooseUser(user);\n                }}\n              >\n                {user.name}\n              </a>\n            </li>\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport classNames from 'classnames';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelector } from './components/UserSelector';\nimport { Loader } from './components/Loader';\nimport { User } from './types/User';\nimport { getUsers } from './api/users';\nimport { getPosts } from './api/posts';\nimport { getComments } from './api/comments';\nimport { Post } from './types/Post';\nimport { Comment } from './types/Comment';\nimport { warningTimer } from './utils/warningTimer';\n\nexport const App: React.FC = () => {\n  const [users, setUsers] = useState<User[]>([]);\n  const [user, setUser] = useState<User | null>(null);\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [post, setPost] = useState<Post | null>(null);\n  const [comments, setComments] = useState<Comment[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isCommentsLoading, setIsCommentsLoading] = useState(false);\n  const [isError, setIsError] = useState(false);\n\n  const handleChoosePost = (choosePost: Post) => {\n    if (choosePost.id === post?.id) {\n      setPost(null);\n\n      return;\n    }\n\n    setPost(choosePost);\n  };\n\n  useEffect(() => {\n    setComments([]);\n    if (post) {\n      (async () => {\n        try {\n          setIsCommentsLoading(true);\n          const commentsData = await getComments(post.id);\n\n          setComments(prevComments => [...prevComments, ...commentsData]);\n        } catch {\n          setIsError(true);\n          warningTimer(setIsError, false, 3000);\n        } finally {\n          setIsCommentsLoading(false);\n        }\n      })();\n    }\n  }, [post]);\n\n  useEffect(() => {\n    setPost(null);\n    if (user) {\n      (async () => {\n        try {\n          setIsLoading(true);\n          const postsData = await getPosts(user.id);\n\n          setPosts(postsData);\n        } catch {\n          setIsError(true);\n          warningTimer(setIsError, false, 3000);\n        } finally {\n          setIsLoading(false);\n        }\n      })();\n    }\n  }, [user]);\n\n  useEffect(() => {\n    (async () => {\n      try {\n        const usersData = await getUsers();\n\n        setUsers(usersData);\n      } catch {\n        setIsError(true);\n        warningTimer(setIsError, false, 3000);\n      }\n    })();\n  }, []);\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector\n                  users={users}\n                  user={user}\n                  onSetUser={setUser}\n                />\n              </div>\n\n              <div className=\"block\" data-cy=\"MainContent\">\n                {!user && (\n                  <p data-cy=\"NoSelectedUser\">\n                    No user selected\n                  </p>\n                )}\n\n                {isLoading && <Loader />}\n\n                {isError && (\n                  <div\n                    className=\"notification is-danger\"\n                    data-cy=\"PostsLoadingError\"\n                  >\n                    Something went wrong!\n                  </div>\n                )}\n\n                {!isError && user && !isLoading && (!posts.length ? (\n                  <div\n                    className=\"notification is-warning\"\n                    data-cy=\"NoPostsYet\"\n                  >\n                    No posts yet\n                  </div>\n                ) : (\n                  <PostsList\n                    posts={posts}\n                    openPost={post}\n                    onChoosePost={handleChoosePost}\n                  />\n                ))}\n              </div>\n            </div>\n          </div>\n\n          {post && (\n            <div\n              data-cy=\"Sidebar\"\n              className={classNames(\n                'tile',\n                'is-parent',\n                'is-8-desktop',\n                'Sidebar',\n                'Sidebar--open',\n              )}\n            >\n              <div className=\"tile is-child box is-success \">\n                <PostDetails\n                  post={post}\n                  comments={comments}\n                  setComments={setComments}\n                  isCommentsLoading={isCommentsLoading}\n                />\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n    </main>\n  );\n};\n","import { Post } from '../types/Post';\nimport { client } from '../utils/fetchClient';\n\nexport const getPosts = (userId: number) => {\n  return client.get<Post[]>(`/posts?userId=${userId}`);\n};\n","import { User } from '../types/User';\nimport { client } from '../utils/fetchClient';\n\nexport const getUsers = () => {\n  return client.get<User[]>('/users');\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}