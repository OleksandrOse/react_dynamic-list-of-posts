{"version":3,"sources":["components/PostsList.tsx","components/Loader/Loader.tsx","utils/fetchClient.ts","utils/warningTimer.ts","components/NewCommentForm.tsx","api/comments.ts","components/PostDetails.tsx","components/UserSelector.tsx","App.tsx","api/posts.ts","api/users.ts","index.tsx"],"names":["PostsList","posts","openPost","handleChoosePost","className","map","post","id","title","type","classNames","onClick","Loader","BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","body","JSON","stringify","headers","then","fetch","response","ok","Error","json","client","warningTimer","callback","value","NewCommentForm","postId","setComments","setIsHasError","useState","isLoading","setIsLoading","errorName","setErrorName","errorEmail","setErrorEmail","errorBody","setErrorBody","DefaultNewComment","name","email","newComment","setNewComment","commentName","handleChange","e","target","handleSubmit","a","preventDefault","commentData","prevComments","onSubmit","onReset","htmlFor","placeholder","onChange","PostDetails","comments","isLoaderComments","isWriteComment","setIsWriteComment","isHasError","removeComment","commentRemoveId","filter","useEffect","length","comment","href","UserSelector","users","chooseUser","user","onSetUser","isActive","setIsActive","role","App","setUsers","setUser","setPosts","setPost","isLoader","setIsLoader","isCommentsLoading","setIsCommentsLoading","isError","setIsError","onLoadGetComments","commentId","commentsData","onLoadGetPosts","userId","postsData","onLoadGetUsers","usersData","choosePost","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c1e379da.chunk.js","sourcesContent":["import React from 'react';\nimport classNames from 'classnames';\nimport { Post } from '../types/Post';\n\ntype Props = {\n  posts: Post[] | [];\n  openPost: Post | null;\n  handleChoosePost: (post: Post) => void;\n};\n\nexport const PostsList: React.FC<Props> = ({\n  posts,\n  openPost,\n  handleChoosePost,\n}) => {\n  return (\n    <div data-cy=\"PostsList\">\n      <p className=\"title\">Posts:</p>\n\n      <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n        <thead>\n          <tr className=\"has-background-link-light\">\n            <th>#</th>\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {posts.map(post => {\n            const { id, title } = post;\n\n            return (\n              <tr data-cy=\"Post\" key={id}>\n                <td data-cy=\"PostId\">{id}</td>\n\n                <td data-cy=\"PostTitle\">\n                  {title}\n                </td>\n\n                <td className=\"has-text-right is-vcentered\">\n                  <button\n                    type=\"button\"\n                    data-cy=\"PostButton\"\n                    className={classNames(\n                      'button is-link',\n                      { 'is-light': openPost?.id !== id },\n                    )}\n                    onClick={() => handleChoosePost(post)}\n                  >\n                    {openPost?.id !== id ? 'Open' : 'Close'}\n                  </button>\n                </td>\n              </tr>\n            );\n          })}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nconst BASE_URL = 'https://mate.academy/students-api';\n\n// a promise resolved after a given delay\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\n// To have autocompletion and avoid mistypes\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null, // we can send any data to the server\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    // We add body and Content-Type only for the requests with data\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  // for a demo purpose we emulate a delay to see if Loaders work\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => {\n      if (!response.ok) {\n        throw new Error();\n      }\n\n      return response.json();\n    });\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","export const warningTimer = <T>(\n  callback: (value: T) => void,\n  value: T,\n  delay: number,\n) => {\n  setTimeout(() => {\n    callback(value);\n  }, delay);\n};\n","import React, { Dispatch, SetStateAction, useState } from 'react';\nimport classNames from 'classnames';\nimport { Comment, CommentData } from '../types/Comment';\nimport { createComment } from '../api/comments';\nimport { warningTimer } from '../utils/warningTimer';\n\ntype Props = {\n  postId: number | undefined;\n  setComments: Dispatch<SetStateAction<Comment[]>>\n  setIsHasError: Dispatch<SetStateAction<boolean>>;\n};\n\nexport const NewCommentForm: React.FC<Props> = ({\n  postId,\n  setComments,\n  setIsHasError,\n}) => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [errorName, setErrorName] = useState(false);\n  const [errorEmail, setErrorEmail] = useState(false);\n  const [errorBody, setErrorBody] = useState(false);\n\n  const DefaultNewComment = {\n    postId: postId || 0,\n    name: '',\n    email: '',\n    body: '',\n  };\n  const [newComment, setNewComment] = useState<CommentData>(DefaultNewComment);\n\n  const { name: commentName, email, body } = newComment;\n\n  const handleChange = (\n    e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>,\n  ) => {\n    const { name, value } = e.target;\n\n    if (commentName) {\n      setErrorName(false);\n    }\n\n    if (email) {\n      setErrorEmail(false);\n    }\n\n    if (body) {\n      setErrorBody(false);\n    }\n\n    setNewComment({\n      ...newComment,\n      [name]: value,\n    });\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!commentName || !email || !body) {\n      setErrorName(!commentName);\n      setErrorEmail(!email);\n      setErrorBody(!body);\n\n      return;\n    }\n\n    try {\n      setIsLoading(true);\n      const commentData = await createComment(newComment);\n\n      setComments(prevComments => [...prevComments, commentData]);\n    } catch (error) {\n      setIsHasError(true);\n      warningTimer(setIsHasError, false, 3000);\n    } finally {\n      setIsLoading(false);\n      const bodyDelete = 'body';\n\n      setNewComment({\n        ...newComment,\n        [bodyDelete]: '',\n      });\n    }\n  };\n\n  const handleReset = (e: React.FormEvent) => {\n    e.preventDefault();\n\n    setNewComment(DefaultNewComment);\n\n    setErrorName(false);\n    setErrorEmail(false);\n    setErrorBody(false);\n  };\n\n  return (\n    <form\n      data-cy=\"NewCommentForm\"\n      onSubmit={handleSubmit}\n      onReset={handleReset}\n    >\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            className={classNames(\n              'input',\n              { 'is-danger': errorName },\n            )}\n            value={commentName}\n            onChange={handleChange}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n\n          {errorName && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {errorName && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Name is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"email\"\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            className={classNames(\n              'input',\n              { 'is-danger': errorEmail },\n            )}\n            value={email}\n            onChange={handleChange}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n\n          {errorEmail && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {errorEmail && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Email is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            name=\"body\"\n            placeholder=\"Type comment here\"\n            className={classNames(\n              'textarea',\n              { 'is-danger': errorBody },\n            )}\n            value={body}\n            onChange={handleChange}\n          />\n        </div>\n\n        {errorBody && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Enter some text\n          </p>\n        )}\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className={classNames(\n              'button is-link',\n              { 'is-loading': isLoading },\n            )}\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          {/* eslint-disable-next-line react/button-has-type */}\n          <button type=\"reset\" className=\"button is-link is-light\">\n            Clear\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import { Comment, CommentData } from '../types/Comment';\nimport { client } from '../utils/fetchClient';\n\nexport const getComments = (commentId: number) => {\n  return client.get<Comment[]>(`/comments?postId=${commentId}`);\n};\n\nexport const deleteComment = (commentId: number) => {\n  return client.delete(`/comments/${commentId}`);\n};\n\nexport const createComment = (data: CommentData) => {\n  return client.post<Comment>('/comments', data);\n};\n","import React, {\n  Dispatch,\n  SetStateAction,\n  useState,\n  useEffect,\n} from 'react';\nimport { Loader } from './Loader';\nimport { NewCommentForm } from './NewCommentForm';\nimport { Comment } from '../types/Comment';\nimport { Post } from '../types/Post';\nimport { deleteComment } from '../api/comments';\nimport { warningTimer } from '../utils/warningTimer';\n\ntype Props = {\n  post: Post | null;\n  comments: Comment[];\n  setComments: Dispatch<SetStateAction<Comment[]>>;\n  isLoaderComments: boolean,\n};\n\nexport const PostDetails: React.FC<Props> = ({\n  post,\n  comments,\n  setComments,\n  isLoaderComments,\n}) => {\n  const [isWriteComment, setIsWriteComment] = useState(false);\n  const [isHasError, setIsHasError] = useState(false);\n\n  const removeComment = async (commentRemoveId: number) => {\n    try {\n      await deleteComment(commentRemoveId);\n      setComments(prevComments => prevComments\n        .filter(({ id }) => id !== commentRemoveId));\n    } catch {\n      setIsHasError(true);\n      warningTimer(setIsHasError, false, 3000);\n    }\n  };\n\n  useEffect(() => {\n    setIsWriteComment(false);\n  }, [post]);\n\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"content\" data-cy=\"PostDetails\">\n        <div className=\"block\">\n          <h2 data-cy=\"PostTitle\">\n            {`${post?.id}: ${post?.title}`}\n          </h2>\n\n          <p data-cy=\"PostBody\">\n            {post?.body}\n          </p>\n        </div>\n\n        <div className=\"block\">\n          {isLoaderComments && <Loader />}\n\n          {isHasError && (\n            <div className=\"notification is-danger\" data-cy=\"CommentsError\">\n              Something went wrong\n            </div>\n          )}\n\n          {!isLoaderComments && !isHasError && (!comments.length ? (\n            <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n              No comments yet\n            </p>\n          ) : (\n            <>\n              <p className=\"title is-4\">Comments:</p>\n              {comments.map(comment => {\n                const {\n                  id,\n                  email,\n                  name,\n                  body,\n                } = comment;\n\n                return (\n                  <article\n                    className=\"message is-small\"\n                    data-cy=\"Comment\"\n                    key={id}\n                  >\n                    <div className=\"message-header\">\n                      <a\n                        href={`mailto:${email}`}\n                        data-cy=\"CommentAuthor\"\n                      >\n                        {name}\n                      </a>\n                      <button\n                        data-cy=\"CommentDelete\"\n                        type=\"button\"\n                        className=\"delete is-small\"\n                        aria-label=\"delete\"\n                        onClick={() => removeComment(id)}\n                      >\n                        delete button\n                      </button>\n                    </div>\n\n                    <div className=\"message-body\" data-cy=\"CommentBody\">\n                      {body}\n                    </div>\n                  </article>\n                );\n              })}\n            </>\n          ))}\n\n          {!isLoaderComments && !isHasError && !isWriteComment && (\n            <button\n              data-cy=\"WriteCommentButton\"\n              type=\"button\"\n              className=\"button is-link\"\n              onClick={() => setIsWriteComment(true)}\n            >\n              Write a comment\n            </button>\n          )}\n        </div>\n\n        {isWriteComment && (\n          <NewCommentForm\n            postId={post?.id}\n            setComments={setComments}\n            setIsHasError={setIsHasError}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport classNames from 'classnames';\nimport { User } from '../types/User';\n\ntype Props = {\n  users: User[];\n  user: User | null;\n  onSetUser: (user: User) => void;\n};\n\nexport const UserSelector: React.FC<Props> = ({\n  users,\n  user: chooseUser,\n  onSetUser,\n}) => {\n  const [isActive, setIsActive] = useState(false);\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      className={classNames(\n        'dropdown',\n        { 'is-active': isActive },\n      )}\n    >\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={() => setIsActive(true)}\n        >\n          <span>{chooseUser?.name || 'Choose a user'}</span>\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      <div className=\"dropdown-menu\" id=\"dropdown-menu\" role=\"menu\">\n        <ul className=\"dropdown-content\">\n          {users.map(user => (\n            <li key={user.id}>\n              <a\n                href={`#user-${user.id}`}\n                className=\"dropdown-item\"\n                onClick={() => {\n                  onSetUser(user);\n                  setIsActive(false);\n                }}\n              >\n                {user.name}\n              </a>\n            </li>\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport classNames from 'classnames';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelector } from './components/UserSelector';\nimport { Loader } from './components/Loader';\nimport { User } from './types/User';\nimport { getUsers } from './api/users';\nimport { getPosts } from './api/posts';\nimport { getComments } from './api/comments';\nimport { Post } from './types/Post';\nimport { Comment } from './types/Comment';\nimport { warningTimer } from './utils/warningTimer';\n\nexport const App: React.FC = () => {\n  const [users, setUsers] = useState<User[]>([]);\n  const [user, setUser] = useState<User | null>(null);\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [post, setPost] = useState<Post | null>(null);\n  const [comments, setComments] = useState<Comment[]>([]);\n  const [isLoader, setIsLoader] = useState(false);\n  const [isCommentsLoading, setIsCommentsLoading] = useState(false);\n  const [isError, setIsError] = useState(false);\n\n  const handleChoosePost = (choosePost: Post) => {\n    if (choosePost.id === post?.id) {\n      setPost(null);\n\n      return;\n    }\n\n    setPost(choosePost);\n  };\n\n  useEffect(() => {\n    setComments([]);\n    if (post) {\n      const onLoadGetComments = async () => {\n        try {\n          setIsCommentsLoading(true);\n          const commentsData = await getComments(post.id);\n\n          setComments(prevComments => [...prevComments, ...commentsData]);\n        } catch (error) {\n          setIsError(true);\n          warningTimer(setIsError, false, 3000);\n        } finally {\n          setIsCommentsLoading(false);\n        }\n      };\n\n      onLoadGetComments();\n    }\n  }, [post]);\n\n  useEffect(() => {\n    if (user) {\n      const onLoadGetPosts = async () => {\n        try {\n          setIsLoader(true);\n          const postsData = await getPosts(user.id);\n\n          setPosts(postsData);\n        } catch (error) {\n          setIsError(true);\n          warningTimer(setIsError, false, 3000);\n        } finally {\n          setIsLoader(false);\n        }\n      };\n\n      onLoadGetPosts();\n    }\n  }, [user]);\n\n  useEffect(() => {\n    const onLoadGetUsers = async () => {\n      try {\n        const usersData = await getUsers();\n\n        setUsers(usersData);\n      } catch (error) {\n        setIsError(true);\n        warningTimer(setIsError, false, 3000);\n      }\n    };\n\n    onLoadGetUsers();\n  }, []);\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector\n                  users={users}\n                  user={user}\n                  onSetUser={setUser}\n                />\n              </div>\n\n              <div className=\"block\" data-cy=\"MainContent\">\n                {!user && (\n                  <p data-cy=\"NoSelectedUser\">\n                    No user selected\n                  </p>\n                )}\n\n                {isLoader && <Loader />}\n\n                {isError && (\n                  <div\n                    className=\"notification is-danger\"\n                    data-cy=\"PostsLoadingError\"\n                  >\n                    Something went wrong!\n                  </div>\n                )}\n\n                {!isError && user && !isLoader && (!posts.length ? (\n                  <div\n                    className=\"notification is-warning\"\n                    data-cy=\"NoPostsYet\"\n                  >\n                    No posts yet\n                  </div>\n                ) : (\n                  <PostsList\n                    posts={posts}\n                    openPost={post}\n                    handleChoosePost={handleChoosePost}\n                  />\n                ))}\n              </div>\n            </div>\n          </div>\n\n          {post && (\n            <div\n              data-cy=\"Sidebar\"\n              className={classNames(\n                'tile',\n                'is-parent',\n                'is-8-desktop',\n                'Sidebar',\n                'Sidebar--open',\n              )}\n            >\n              <div className=\"tile is-child box is-success \">\n                <PostDetails\n                  post={post}\n                  comments={comments}\n                  setComments={setComments}\n                  isLoaderComments={isCommentsLoading}\n                />\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n    </main>\n  );\n};\n","import { Post } from '../types/Post';\nimport { client } from '../utils/fetchClient';\n\nexport const getPosts = (userId: number) => {\n  return client.get<Post[]>(`/posts?userId=${userId}`);\n};\n","import { User } from '../types/User';\nimport { client } from '../utils/fetchClient';\n\nexport const getUsers = () => {\n  return client.get<User[]>('/users');\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}